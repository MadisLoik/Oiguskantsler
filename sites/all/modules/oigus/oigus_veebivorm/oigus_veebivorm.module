<?php

/**
 * Implementation of hook_webform_component_info().
 */
function oigus_veebivorm_webform_component_info() {
  $components = array();

  $components['oigus_veebivorm'] = array(
    'label' => t('Fail (dÃ¼naamiline)'),
    'features' => array(
      'conditional' => FALSE,
      'attachment' => TRUE,
    ),
  );

  return $components;
}

/**
 * Implementation of _webform_defaults_component().
 */
function _webform_defaults_oigus_veebivorm() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'mandatory' => 0,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'filtering' => array(
        'types' => array('gif', 'jpg', 'png'),
        'addextensions' => '',
        'size' => 800,
      ),
      'savelocation' => '',
      'width' => '',
      'title_display' => 0,
      'description' => '',
      'attributes' => array(),
      'private' => FALSE,
    ),
  );
}

/**
 * Implementation of _webform_theme_component().
 */
function _webform_theme_oigus_veebivorm() {
  return array(
    'webform_edit_oigus_veebivorm' => array(
      'render element' => 'form',
    ),
    'webform_render_oigus_veebivorm' => array(
      'render element' => 'element',
    ),
    'webform_display_oigus_veebivorm' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * A Form API element validate function.
 *
 * Change the submitted values of the component so that all filtering extensions
 * are saved as a single array.
 */
function _webform_edit_oigus_veebivorm_filtering_validate($element, &$form_state) {
  // Predefined types.
  $extensions = array();
  foreach (element_children($element['types']) as $category) {
    foreach (array_keys($element['types'][$category]['#value']) as $extension) {
      if ($element['types'][$category][$extension]['#value']) {
        $extensions[] = $extension;
      }
    }
  }

  // Additional types.
  $additional_extensions = explode(',', $element['addextensions']['#value']);
  foreach ($additional_extensions as $extension) {
    $clean_extension = drupal_strtolower(trim($extension));
    if (!empty($clean_extension) && !in_array($clean_extension, $extensions)) {
      $extensions[] = $clean_extension;
    }
  }

  form_set_value($element['types'], $extensions, $form_state);
}

/**
 * Implements _webform_edit_component().
 */
function _webform_edit_oigus_veebivorm($component) {
    $form = array();
    $form['#theme'] = 'webform_edit_oigus_veebivorm';

    $form['validation']['filtering'] = array(
      '#element_validate' => array('_webform_edit_oigus_veebivorm_filtering_validate'),
      '#parents' => array('extra', 'filtering'),
    );

    // Find the list of all currently valid extensions.
    $current_types = isset($component['extra']['filtering']['types']) ? $component['extra']['filtering']['types'] : array();

    $types = array('gif', 'jpg', 'png');
    $form['validation']['filtering']['types']['webimages'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Web Images'),
      '#options' => drupal_map_assoc($types),
      '#default_value' => array_intersect($current_types, $types),
    );

    $types = array('bmp', 'eps', 'tif', 'pict', 'psd');
    $form['validation']['filtering']['types']['desktopimages'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Desktop Images'),
      '#options' => drupal_map_assoc($types),
      '#default_value' => array_intersect($current_types, $types),
    );

    $types = array('txt', 'rtf', 'html', 'odf', 'pdf', 'doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'xml');
    $form['validation']['filtering']['types']['documents'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Documents'),
      '#options' => drupal_map_assoc($types),
      '#default_value' => array_intersect($current_types, $types),
    );

    $types = array('avi', 'mov', 'mp3', 'ogg', 'wav');
    $form['validation']['filtering']['types']['media'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Media'),
      '#options' => drupal_map_assoc($types),
      '#default_value' => array_intersect($current_types, $types),
    );

    $types = array('bz2', 'dmg', 'gz', 'jar', 'rar', 'sit', 'tar', 'zip');
    $form['validation']['filtering']['types']['archives'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Archives'),
      '#options' => drupal_map_assoc($types),
      '#default_value' => array_intersect($current_types, $types),
    );

    $form['validation']['filtering']['addextensions'] = array(
      '#type' => 'textfield',
      '#title' => t('Additional Extensions'),
      '#default_value' => $component['extra']['filtering']['addextensions'],
      '#description' => t('Enter a list of additional file extensions for this upload field, seperated by commas.<br /> Entered extensions will be appended to checked items above.'),
      '#size' => 60,
      '#weight' => 3,
      '#default_value' => $component['extra']['filtering']['addextensions'],
    );

    $form['validation']['filtering']['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Max Upload Size'),
      '#default_value' => $component['extra']['filtering']['size'],
      '#description' => t('Enter the max file size a user may upload (in KB).'),
      '#size' => 10,
      '#weight' => 3,
      '#field_suffix' => t('KB'),
      '#default_value' => $component['extra']['filtering']['size'],
      '#parents' => array('extra', 'filtering', 'size'),
      '#element_validate' => array('_webform_edit_oigus_veebivorm_size_validate'),
    );
    $form['extra']['savelocation'] = array(
      '#type' => 'textfield',
      '#title' => t('Upload Directory'),
      '#default_value' => $component['extra']['savelocation'],
      '#description' => t('Webform uploads are always saved in the site files directory. You may optionally specify a subfolder to store your files.'),
      '#weight' => 3,
      '#field_prefix' => file_stream_wrapper_get_instance_by_scheme(file_default_scheme())->getDirectoryPath() . '/webform/',
      '#element_validate' => array('_webform_edit_oigus_veebivorm_check_directory'),
      '#after_build' => array('_webform_edit_oigus_veebivorm_check_directory'),
    );

    return $form;
}

/**
 * A Form API element validate function to check filesize is numeric.
 */
function _webform_edit_oigus_veebivorm_size_validate($element) {
  if (!empty($element['#value'])) {
    if (!is_numeric($element['#value']) || intval($element['#value']) != $element['#value']) {
      form_error($element, t('Max upload size must be a number in KB.'));
    }
  }
}

/**
 * A Form API after build and validate function.
 *
 * Ensure that the destination directory exists and is writable.
 */
function _webform_edit_oigus_veebivorm_check_directory($element) {
  $base_dir = file_build_uri('webform');
  $destination_dir = file_build_uri('webform/' . $element['#value']);

  // Sanity check input to prevent use parent (../) directories.
  $real_base = drupal_realpath($base_dir);
  $real_destination = drupal_realpath($destination_dir);
  if (strpos($real_destination, $real_base) !== 0) {
    form_error($element, t('The save directory %directory is not valid.', array('%directory' => $destination_dir)));
  }
  else {
    $destination_success = file_prepare_directory($destination_dir, FILE_CREATE_DIRECTORY);
    if (!$destination_success) {
      form_error($element, t('The save directory %directory could not be created. Check that the webform files directory is writtable.', array('%directory' => $destination_dir)));
    }
  }

  return $element;
}

/**
 * Implements _webform_render_component().
 */
function _webform_render_oigus_veebivorm($component, $value = NULL, $filter = TRUE) {
  // Normally every file component is given a unique ID based on its key.
  if (isset($component['nid'])) {
    $node = node_load($component['nid']);
    $form_key = implode('_', webform_component_parent_keys($node, $component));
  }
  // If being used as a default though, we don't yet have a form key.
  else {
    $form_key = 'default';
  }

  $element['#attached']['js'] = array(
    drupal_get_path('module', 'oigus_veebivorm') . '/js/oigus_veebivorm.js',
  );

  $element['oigus_' . $form_key . '_1'] = array(
    '#type' => 'file',
    //'#required' => $component['mandatory'], // Drupal core bug with required file uploads.
    '#attributes' => $component['extra']['attributes'],
    '#tree' => FALSE, // file_check_upload assumes a flat $_FILES structure.
    '#element_validate' => array(
      '_webform_validate_oigus_veebivorm',
      '_webform_required_oigus_veebivorm',  // Custom required routine.
    ),
    '#webform_component' => $component,
    '#theme_wrappers' => array(),
  );
  $element['#webform_component'] = $component;
  $element['#weight'] = $component['weight'];
  $element['#title'] = $filter ? _webform_filter_xss($component['name']) : $component['name'];
  $element['#title_display'] = $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before';
  $element['#description'] = $filter ? _webform_filter_descriptions($component['extra']['description']) : $component['extra']['description'];

  $element['#theme'] = 'webform_render_oigus_veebivorm';
  $element['#theme_wrappers'] = array('webform_element');

  // Handles the asterisk for mandatory fields. Note that this is only on the
  // wrapper, not on the file field itself. We handle validation separately.
  if ($component['mandatory']) {
    $element['#required'] = TRUE;
  }

  // Add a hidden element to store the FID for new files.
  $element['_fids'] = array(
    '#type' => 'value',
    '#default_value' => '',
  );

  // Add a hidden element to store the FID for existing files.
  $element['_old'] = array(
    '#type' => 'value',
    '#value' => isset($value[0]) ? $value[0] : NULL,
  );

  return $element;
}

/**
 * Render a File component.
 */
function theme_webform_render_oigus_veebivorm($variables) {
  $element = $variables['element'];
  $children=(element_children($element));
  list(, $name, $count) = explode('_', array_shift($children));

  return '<div class="oigus-veebivorm ' . $name  . '"><div class="elements clearfix" data-name="'  . $name  . '"><div class="element element-1 clearfix">' . drupal_render_children($element) . '</div></div><div class="actions"></div></div>';
}

/**
 * A Form API element validate function.
 *
 * Fix Drupal core's handling of required file fields.
 */
function _webform_required_oigus_veebivorm($element, $form_state) {
  $component = $element['#webform_component'];
  $parents = $element['#array_parents'];
  array_pop($parents);
  $form_key = implode('_', $parents);

  // Do not validate requiredness on back or draft button.
  if (isset($form_state['clicked_button']['#validate']) && empty($form_state['clicked_button']['#validate'])) {
    return;
  }

  // Check if a value is already set in the hidden field.
  $values = $form_state['values'];
  $key = array_shift($parents);
  $found = FALSE;
  while (isset($values[$key])) {
    if (isset($values[$key])) {
      $values = $values[$key];
      $found = TRUE;
    }
    else {
      $found = FALSE;
    }
    $key = array_shift($parents);
  }

  if (!$found || (empty($values['_fids']) && empty($values['_old']))) {
    if (empty($_FILES['files']['name']['oigus_' . $form_key . '_1']) && $component['mandatory']) {
      form_error($element, t('%field field is required.', array('%field' => $component['name'])));
    }
  }
}

/**
 * A Form API element validate function.
 *
 * Ensure that the uploaded file matches the specified file types.
 */
function _webform_validate_oigus_veebivorm($element, &$form_state) {
  if (form_get_error($element)) {
    return;
  }

  $component = $element['#webform_component'];
  $form_key = implode('_', $element['#parents']);

  $files = array();

  foreach ($_FILES['files']['name'] as $key => $file_name) {
    if (strpos($key, 'oigus_') !== FALSE) {
      $files[$key] = $file_name;
    }
  }

  foreach ($files as $key => $file_name) {
    if (is_array($file_name) || empty($file_name)) {
      return;
    }
  }

  if (count($files) > 10) {
    return;
  }

  $extensions = $component['extra']['filtering']['types'];
  $extension_list = '';

  if (count($extensions) > 1) {
    for ($n = 0; $n < count($extensions) - 1; $n++) {
      $extension_list .= $extensions[$n] . ', ';
    }

    $extension_list .= 'or ' . $extensions[count($extensions) - 1];
  }
  elseif (!empty($extensions)) {
    $extension_list = $extensions[0];
  }

  if (in_array('jpg', $extensions)) {
    $extensions[] = 'jpeg';
  }

  $strrpos = function_exists('mb_strrpos') ? 'mb_strrpos' : 'strrpos';

  $file_error = FALSE;

  foreach ($files as $key => $file_name) {
    $dot = $strrpos($file_name, '.');
    $extension = drupal_strtolower(drupal_substr($file_name, $dot+1));

    if (!empty($extensions) && !in_array($extension, $extensions)) {
      form_error($element, t("Files with the '%ext' extension are not allowed, please upload a file with a %exts extension.", array('%ext' => $extension, '%exts' => $extension_list)));

      $file_error = TRUE;

      break;
    }
  }

  foreach ($files as $key => $file_name) {
    if ($_FILES['files']['size'][$key] > $component['extra']['filtering']['size'] * 1024) {
      form_error($element, t("The file '%filename' is too large (%filesize KB). Please upload a file %maxsize KB or smaller.", array('%filename' => $file_name, '%filesize' => (int) ($_FILES['files']['size'][$key] / 1024), '%maxsize' => $component['extra']['filtering']['size'])));

      $file_error = TRUE;

      break;
    }
  }

  // Save the file to a temporary location.
  if (!$file_error) {
    $upload_dir = file_build_uri('webform/' . $component['extra']['savelocation']);
    if (file_prepare_directory($upload_dir, FILE_CREATE_DIRECTORY)) {
      // Note that the $extensions list was already validated above but needs to
      // be passed into file_save_upload() for it to pass internal validation
      // and not use the default extension checklist.

      $fids = array();

      foreach ($files as $key => $file_name) {
        $file = file_save_upload($key, array('file_validate_extensions' => array(implode(' ', $extensions))), $upload_dir);
        if ($file) {
          $fids[] = $file->fid;
          // Set the hidden field value.
          $parents = $element['#array_parents'];
          array_pop($parents);
          $parents[] = '_fids';
          form_set_value(array('#parents' => $parents), serialize($fids), $form_state);
        }
        else {
          drupal_set_message(t('The uploaded file %filename was unable to be saved. The destination directory may not be writable.', array('%filename' => $file->filename)), 'error');
        }
      }
    }
    else {
      drupal_set_message(t('The uploaded file was unable to be saved. The destination directory does not exist.'), 'error');
    }
  }
}

/**
 * Implements _webform_submit_component().
 */
function _webform_submit_oigus_veebivorm($component, $value) {
  $fids = unserialize($value['_fids']);

  if ($fids) {
    foreach ($fids as $fid) {
      $file = file_load($fid);

      if ($file) {
        $file->status = FILE_STATUS_PERMANENT;

        file_save($file);
      }
    }
  }

  return $value['_fids'];
}
