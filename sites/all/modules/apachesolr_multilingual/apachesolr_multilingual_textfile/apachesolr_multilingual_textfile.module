<?php

/**
 * Implements hook_node_info().
 *
 * @return array
 */
function apachesolr_multilingual_textfile_node_info() {
  return array(
    'apachesolr_multilingual_textfile' => array(
      'name' => 'Apache Solr Multilingual Textfile',
      'base' => 'node_content',
      'description' => 'Create / edit a apache solr textfile (stopwords.txt, synonyms.txt, ...)',
      'promote' => FALSE,
      'has_title' => FALSE,
      'custom' => 1,
      'locked' => TRUE,
    ),
  );
}

/**
 * Returns the list of available filetypes
 *
 * @return array
 */
function _apachesolr_multilingual_textfile_filetypes() {
  return variable_get(
    'apachesolr_multilingual_filetypes',
    array(
      'stopwords.txt' => 'stopwords.txt',
      'synonyms.txt' => 'synonyms.txt',
      'protwords.txt' => 'protwords.txt',
      'compoundwords.txt' => 'compoundwords.txt',
     )
  );
}

/**
 * This function makes sure that all the title stuff has the same format
 *
 * The node title is used to detect duplicates and other stuff
 * Thus it's important that it has always the same format
 *
 * @param string $language
 * @param string $filename
 * @return string
 */
function _apachesolr_multilingual_textfile_create_title($language, $filename) {
  if (strlen($language) == 2) {
    $active_languages = locale_language_list();
    $language = $active_languages[$language];
  }
  return $language . ' / ' . $filename;
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function apachesolr_multilingual_textfile_theme() {
  return array(
    'apachesolr_multilingual_textfile_form_element' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Calls the validator
 *
 *  @return void
 */
function apachesolr_multilingual_textfile_form_validate_new_config($element, $form_state) {
  module_load_include('admin.inc', 'apachesolr_multilingual');
  apachesolr_multilingual_admin_form_validate_new_config($element, $form_state);
}

/**
 * Calls the validator
 *
 *  @return void
 */
function apachesolr_multilingual_textfile_download_unique_language_config_validate($form, &$form_state) {
  apachesolr_multilingual_textfile_download_config_validate(
    $form,
    $form_state,
    FALSE
  );
}

/**
 * Calls the validator
 *
 *  @return void
 */
function apachesolr_multilingual_textfile_download_multilingual_config_validate($form, &$form_state) {
  apachesolr_multilingual_textfile_download_config_validate(
    $form,
    $form_state,
    TRUE
  );
}

/**
 * Sends all the necessary config files in as download in a archive
 *
 * @return void
 */
function apachesolr_multilingual_textfile_download_config_validate($form, &$form_state, $multilingual) {
  $selected_languages = variable_get('apachesolr_multilingual_languages', array());
  $apachesolr_multilingual_filetypes = _apachesolr_multilingual_textfile_filetypes();
  $language_count = 0;
  foreach ($selected_languages as $lang) {
    if ($lang) {
      $language_count++;
    }
  }
  if ($language_count) {
    // array for zip content
    $files = array();
    // languages to handle
    foreach ($selected_languages as $language) {
    	if ($language != LANGUAGE_NONE) {
      	foreach ($apachesolr_multilingual_filetypes as $filename) {
          $files[$filename] = '';

          $title = _apachesolr_multilingual_textfile_create_title($language, $filename);
          $node = entity_load(
          	'node',
          	array(),
          	array('type' => 'apachesolr_multilingual_textfile', 'title' => $title)
          );
          if (count($node)) {
          	$node = reset($node);

          	// @TODO There has to be a nicer way to solve stuff like this!
          	$rawBody = (isset($node->body[LANGUAGE_NONE]))?
          		$node->body[LANGUAGE_NONE][0]['value'] :
          		$node->body[$node->language][0]['value'];

          	$body = apachesolr_multilingual_textfile_isolatin1accent_filter($rawBody);

          	if ($multilingual) {
            	$s2f = explode('.', $filename);
            	$language_filename = $s2f[0] . '_' . $node->language . '.' . $s2f[1];
            	$files[$language_filename] = $body;
            	if ('stopwords.txt' == $filename) {
              	$files['stopwords_spell_' . $language . '.txt'] = $rawBody;
            	}
          	}
          	else {
            	$files[$language_filename] = $body;
            	if ('stopwords.txt' == $filename) {
              	$files['stopwords_spell.txt'] = $rawBody;
            	}
          	}
          }
      	}
    	}
    }

    require_once dirname(__FILE__) . '/../lib/apachesolr_multilingual_zipfile.php';
    $apachesolr_multilingual_config_zip = new apachesolr_multilingual_zipfile();

    $data = $form['solrconfig_str_complete']['#value'];
    $apachesolr_multilingual_config_zip->addFile($data, 'solrconfig.xml');

    $data = $form['schema_str_complete']['#value'];
    $apachesolr_multilingual_config_zip->addFile($data, 'schema.xml');

    $data = file_get_contents(dirname(__FILE__) . '/../resources/mapping-ISOLatin1Accent.txt');
    $apachesolr_multilingual_config_zip->addFile($data, 'mapping-ISOLatin1Accent.txt');

    if (!isset($files['compoundwords.txt'])) {
      // solr example installation doesn't contain compoundwords.txt. so we have to ensure that it exists in our package
      $files['compoundwords.txt'] = '';
    }

    foreach ($files as $filename => $data) {
      if (strpos($filename, 'compoundwords') !== FALSE || strpos($filename, 'protwords') !== FALSE) {
        // compoundwords and protwords are used AFTER a lower case filter in schema.xml.
        // because isolatin1accent_filter converted all accent characters we don't need to care about the locale for strtolower
        $data = drupal_strtolower($data);
      }
      $apachesolr_multilingual_config_zip->addFile($data, $filename);
    }

    drupal_add_http_header('Content-Type:', 'application/x-gzip');
    drupal_add_http_header('Expires: ', gmdate('D, d M Y H:i:s') . ' GMT');
    $file_name = ($multilingual) ? 'apachesolr_multilingual_config.zip' : 'apachesolr_unique_language_config.zip';
    drupal_add_http_header('Content-Disposition:', 'inline; filename="' . $file_name . '"');
    drupal_add_http_header('Cache-Control:', 'must-revalidate, post-check=0, pre-check=0');
    drupal_add_http_header('Pragma:', 'public');
    print $apachesolr_multilingual_config_zip->file();
    exit;
  }

  drupal_not_found();
}

/**
 * Prepares the form
 *
 * @return void
 */
function apachesolr_multilingual_textfile_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'node_type_form') {
    if ('apachesolr_multilingual_textfile' == $form['#node_type']->orig_type) {
      // @TODO Still needed in D7?
      // set the needed values
      $form['workflow']['language_content_type']['#type'] = 'value';
      $form['workflow']['language_content_type']['#default_value'] = '1';
      // inform the user
      $form['workflow']['language_content_type_info']['#type'] = 'radio';
      $form['workflow']['language_content_type_info']['#values'] = array( 0 => '0', 1 => '1');
      $form['workflow']['language_content_type_info']['#checked'] = 'checked';
      $form['workflow']['language_content_type_info']["#title"] = t("Multilingual support");
      $form['workflow']['language_content_type_info']["#description"] = t("Enabled multilingual support is necessary for this content type");
    }
  }
  elseif ($form_id == 'apachesolr_multilingual_admin_form') {
    $form['#submit'][] = 'apachesolr_multilingual_textfile_admin_form_submit';
  }
  elseif ($form_id == 'apachesolr_multilingual_schema_generator_form') {
    $apachesolr_multilingual_filetypes = _apachesolr_multilingual_textfile_filetypes();
    $selected_languages = variable_get('apachesolr_multilingual_languages', array());
    $language_count = 0;
    foreach ($selected_languages as $lang) {
      if ($lang) {
        $language_count++;
      }
    }
    if ($language_count > 0) {
      $form['#validate'][] = 'apachesolr_multilingual_textfile_form_validate';

      if ($language_count == 1) {
        $form['set1']['submit_zip'] = array(
          '#type' => 'submit',
          '#value' => t('Download !file', array('!file' => 'apachesolr_unique_language_config.zip')),
          '#validate' =>  array_merge(
            $form['set1']['submit']['#validate'],
            array('apachesolr_multilingual_textfile_download_unique_language_config_validate')
          ),
        );
      }

      $form['set2']['submit_zip'] = array(
        '#type' => 'submit',
        '#value' => t('Download !file', array('!file' => 'apachesolr_multilingual_config.zip')),
        '#validate' => array_merge(
          $form['set2']['submit']['#validate'],
          array('apachesolr_multilingual_textfile_download_multilingual_config_validate')
        ),
      );

      $form['set3'] = array(
        '#type' => 'fieldset',
        '#title' => t('Manage Multilingual Configuration Files'),
        '#weight' => 7,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );

      $form['set3']['textfiles'] = array(
        '#type' => 'item',
        '#markup' => theme(
          'apachesolr_multilingual_textfile_form_element',
          $selected_languages
        ),
      );
    }
  }
}

/**
 * Modifies the node before it's saved
 *
 * Set's the status always to unpublished
 * Creates the node title
 *
 * @return void
 */
function apachesolr_multilingual_textfile_node_presave($node) {
  if ($node->type == 'apachesolr_multilingual_textfile') {
    // prohibit publishing
    $node->status = 0;
    // create fix title
    $node->title = _apachesolr_multilingual_textfile_create_title(
      $node->language,
      $node->apachesolr_multil_txtfile_fname[LANGUAGE_NONE][0]['value']
    );
  }
}

/**
 * Implements hook_node_validate().
 *
 *  @return void
 */
function apachesolr_multilingual_textfile_node_validate($node, $form) {
  if ($node->type == 'apachesolr_multilingual_textfile') {
    if (!$node->language || $node->language == LANGUAGE_NONE) {
      form_set_error('language', t('Please define a specific language'));
      return;
    }
    if (!$node->apachesolr_multil_txtfile_fname) {
      form_set_error('filename', t('Please choose a filename'));
      return;
    }

    // @TODO There has to be a nicer way to solve stuff like this!
    $filename = $node->apachesolr_multil_txtfile_fname[LANGUAGE_NONE][0]['value'];
    $body = (isset($node->body[LANGUAGE_NONE]))?
      $node->body[LANGUAGE_NONE][0]['value'] :
      $node->body[$node->language][0]['value'];

    $title = _apachesolr_multilingual_textfile_create_title(
      $node->language,
      $filename
    );

    $nodes = node_load_multiple(
      array(),
      array('type' => 'apachesolr_multilingual_textfile', 'title' => $title)
    );
    if (count($nodes) > 1 || (!isset($nodes[$node->nid]) && count($nodes))) {
      form_set_error('title', t('node already exists: %title', array('%title' => $title)));
    }

    $error = apachesolr_multilingual_validate_solr_textfile($filename, $body);
    if ($error) {
      form_set_error('body', t('syntax error in apache solr textfile: %filename - %error', array('%filename' => $filename, '%error' => $error)));
    }
  }
}

/**
 * Filters unwelcome chars from the configurations
 *
 * @return string
 *  The filtered config text
 */
function apachesolr_multilingual_textfile_isolatin1accent_filter($text) {
  static $lines = array();

  if (empty($lines)) {
    $mapping_source_path = dirname(__FILE__) . '/../resources/';
    $mappings = file_get_contents($mapping_source_path . 'mapping-ISOLatin1Accent.txt');
    $mappings = preg_replace('/\s*$/', '', $mappings);
    $mappings = preg_replace('/^\s*/', '', $mappings);
    $lines = explode("\n", $mappings);
    foreach ($lines as $i => $line) {
      if (substr($line, 0, 1) == '#' || trim($line) == '') {
        unset($lines[$i]);
      }
    }
  }

  $sr = array('"', ' ');
  foreach ($lines as $line) {
    $line = str_replace($sr, '', $line);
    $mappings = explode("=>", $line);
    $text = preg_replace("@\\x{" . str_replace('\u', '', $mappings[0]) . "}@u", $mappings[1], $text);
  }

  return $text;
}

/**
 * Checks the configuration for errors
 *
 * @param string $filename
 *  Used to determine which checks have to be done
 * @param string $text
 *  Configuration text to check
 *
 * @return string
 *  Error messages
 */
function apachesolr_multilingual_validate_solr_textfile($filename, $text) {
  $message = '';
  // remove comments for checkup and split body in lines
  $text = preg_replace('/\s*$/', '', $text);
  $text = preg_replace('/^\s*/', '', $text);
  $lines = explode("\n", $text);
  foreach ($lines as $i => $line) {
    if (drupal_substr($line, 0, 1) == '#' || trim($line) == '') {
      unset($lines[$i]);
    }
  }
  // parser
  switch ($filename) {
    case 'stopwords.txt':
      foreach ($lines as $i => $line) {
        $words = explode(" ", $line);
        if (count($words) > 1) {
          $message = drupal_strtoupper('line ' . $i . ': (' . $line . ')');
          break;
        };
      }
      break;

    case 'synonyms.txt':
      foreach ($lines as $i => $line) {
        $words = explode(" ", $line);
        if (count($words) < 3) {
          $message = drupal_strtoupper('line ' . $i . ': (' . $line . ')');
          break;
        };
        if ($words[1] != '=>') {
          $message = drupal_strtoupper('line ' . $i . ': missing => (' . $line . ')');
          break;
        };
      }
      break;

    case 'protwords.txt':
      foreach ($lines as $i => $line) {
        $words = explode(" ", $line);
        if (count($words) > 1) {
          $message = drupal_strtoupper('line ' . $i . ': (' . $line . ')');
          break;
        };
      }
      break;

    case 'compoundwords.txt':
      break;

  }
  return $message;
}

/**
 * Implements node_form_submit().
 *
 * Saves the config-node into the db
 *
 * @return void
 */
function apachesolr_multilingual_textfile_admin_form_submit($form, &$form_state) {
  global $user;

  $all_languages = language_list();
  $posted_languages = $form['apachesolr_multilingual_language_settings']['apachesolr_multilingual_languages']['#value'];
  $apachesolr_multilingual_filetypes = _apachesolr_multilingual_textfile_filetypes();
  // languages to handle
  if ($posted_languages) {
    foreach ($posted_languages as $language) {
      foreach ($apachesolr_multilingual_filetypes as $filename) {

        $title = _apachesolr_multilingual_textfile_create_title($language, $filename);
        $nodes = node_load_multiple(
          array(),
          array('type' => 'apachesolr_multilingual_textfile', 'title' => $title)
        );

        if (!count($nodes)) {
          // generate content
          $node = new stdClass();
          $node->type = 'apachesolr_multilingual_textfile';
          $node->title = $title;
          $node->status = 0;
          $node->language = $language;
          $node->uid = $user->uid;
          $node->programmed = TRUE;

          // TODO There has to be a nicer way to do this
          $node->apachesolr_multil_txtfile_fname = array(LANGUAGE_NONE => array(array('value' => $filename)));
          $node->body = array(LANGUAGE_NONE => array(array('value' => '')));

          node_save($node);

          drupal_set_message('the content type named ' . t('%filename has been created', array('%filename' => $title)));
        }
        else {
          drupal_set_message('the content type named ' . t('%filename already exists, nothing to do', array('%filename' => $title)));
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function apachesolr_multilingual_textfile_permission() {
  return array(
      'view apachesolr_multilingual_textfile' => array(
          'title' => t('view apachesolr_multilingual_textfile'),
        ),
      'create apachesolr_multilingual_textfile' => array(
          'title' => t('create apachesolr_multilingual_textfile'),
        ),
      'edit apachesolr_multilingual_textfile' => array(
          'title' => t('edit apachesolr_multilingual_textfile'),
        ),
      'delete apachesolr_multilingual_textfile' => array(
          'title' => t('delete apachesolr_multilingual_textfile'),
        ),
      );
}

/**
 * Implements node_access().
 *
 * @param $op
 * @param $node
 * @param $account
 *
 * @return boolean
 */
function apachesolr_multilingual_textfile_node_access($op, $node, $account) {
  switch ($op) {
    case 'view':
      return user_access('view apachesolr_multilingual_textfile', $account);
      break;

    case 'create':
      return user_access('create apachesolr_multilingual_textfile', $account);
      break;

    case 'update':
      return user_access('edit apachesolr_multilingual_textfile', $account);
      break;

    case 'delete':
      return user_access('delete apachesolr_multilingual_textfile', $account);
      break;
  }
  return FALSE;
}

/**
 * Implements theme_form_element().
 * Displays the content type admin overview page.
 *
 * @return string
 *  HTML
 */
function theme_apachesolr_multilingual_textfile_form_element($selected_languages) {
  $header = array(t('Text File'), t('Size'), array('data' => t('Operations'), 'colspan' => 2));
  $rows = array();
  foreach ($selected_languages as $language) {
    if ($language) {

      $nodes = node_load_multiple(
        array(),
        array('type' => 'apachesolr_multilingual_textfile', 'language' => $language)
      );

      if (count($nodes)) {
        foreach ($nodes as $node) {
          $body = (isset($node->body[LANGUAGE_NONE]))?
            $node->body[LANGUAGE_NONE][0]['value'] :
            $node->body[$node->language][0]['value'];
          $rows[] = array(
            array('data' => $node->title),
            array('data' => format_size(drupal_strlen($body))),
            array(
              'data' => l(
                t('download'),
                'node/' . $node->nid . '/apachesolr_multilingual_textfile_download',
                array('query' => array('destination' => 'admin/config/search/apachesolr/schema_generator'))
              ),
            ),
            array(
              'data' => l(
                t('edit'),
                'node/' . $node->nid . '/edit',
                array('query' => array('destination' => 'admin/config/search/apachesolr/schema_generator'))
              ),
            ),
          );
        }
      }
    }
  }
  $output = theme_table(array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => NULL,
    'colgroups' => NULL,
    'sticky' => TRUE,
    'empty' => t('No data has been collected.'),
  ));
  return $output;
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function apachesolr_multilingual_textfile_menu() {
  $items = array();
  $items['node/%node/apachesolr_multilingual_textfile_download'] = array(
    'title' => 'download apachesolr multilingual textfile',
    'page callback' => 'apachesolr_multilingual_textfile_download',
    'page arguments' => array(1),
  // REVIEW access rights
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Sends a textfile as download
 *
 * @param $node
 *
 * @return void
 */
function apachesolr_multilingual_textfile_download($node) {
  // TODO There has to be a nicer way to solve stuff like this!
  $filename = $node->apachesolr_multil_txtfile_fname[LANGUAGE_NONE][0]['value'];
  $body = (isset($node->body[LANGUAGE_NONE]))?
    $node->body[LANGUAGE_NONE][0]['value'] :
    $node->body[$node->language][0]['value'];

  $s2f = explode('.', $filename);
  $filename = $s2f[0] . '_' . $node->language . '.' . $s2f[1];
  if ($node instanceof stdClass) {
    drupal_add_http_header('Content-Type:', 'text/xml; charset=utf-8');
    drupal_add_http_header('Content-Disposition:', 'attachment; filename="' . $filename . '"');
    die($body);
  }
  drupal_not_found();
}
