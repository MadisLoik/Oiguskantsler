<?php

/**
 * @file
 * Install file for Apache Solr Multilingual module.
 *
 * The definition of the fields for the module is here, although
 * apachesolr_multilingual_textfile_node_info() provides the
 * actual content type definition.
 */

/**
 * Implements hook_install().
 *
 * - Create filename field.
 *
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 *
 * @return void
 */
function apachesolr_multilingual_textfile_install() {
  // Set initital Vars: Enable "language" on
  // content type apachesolr_multilingual_textfile
  variable_set('language_content_type_apachesolr_multilingual_textfile', '1');

  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['apachesolr_multilingual_textfile']);

  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  $body_instance = field_info_instance(
    'node',
    'body',
    'apachesolr_multilingual_textfile'
  );

  // Add our apachesolr_multilingual_textfile view mode to the
  // body instance display by
  // instructing the body to display as a summary
  $body_instance['type'] = 'text_plain';
  $body_instance['label'] = 'Create / edit a apache solr textfile (stopwords.txt, synonyms.txt, ...)';
  $body_instance['settings']['text_processing'] = 0;
  $body_instance['default_value']['value'] = '';

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_apachesolr_multilingual_textfile_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_apachesolr_multilingual_textfile_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'apachesolr_multilingual_textfile';
    field_create_instance($instance);
  }
}

/**
 * Return a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both hook_install()
 * and hook_uninstall().
 *
 * @return array
 */
function _apachesolr_multilingual_textfile_installed_fields() {
  $t = get_t();
  return array(
    'apachesolr_multil_txtfile_fname' => array(
      'field_name'  => 'apachesolr_multil_txtfile_fname',
      'type' => 'list_text',
      'module' => 'list',
      'cardinality' => 1,
      'settings' => array (
          'allowed_values_function' => '_apachesolr_multilingual_textfile_filetypes',
      ),
    ),
  );
}

/**
 * Return a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 *
 * @return array
 */
function _apachesolr_multilingual_textfile_installed_instances() {
  $t = get_t();
  return array(
    'apachesolr_multil_txtfile_fname' => array(
      'field_name'  => 'apachesolr_multil_txtfile_fname',
      'label' => $t('Select a text type'),
      'type' => 'text',
      'widget' => array (
            'weight' => -4,
            'type' => 'options_select',
            'module' => 'options',
            'active' => 0,
            'settings' => array (
                ),
        ),
      'required' => 1,
    ),
  );
}

/**
 * Implements hook_uninstall().
 *
 * @return void
 */
function apachesolr_multilingual_textfile_uninstall() {
  // Gather all the content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'apachesolr_multilingual_textfile'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_apachesolr_multilingual_textfile_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the
  // apachesolr_multilingual_textfile content type
  // (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'apachesolr_multilingual_textfile');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('apachesolr_multilingual_textfile');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}
